This is project to add new features from linux kernel 2.6.11 (as the 
book `Understand The Linux Kernel` considers) which I consider simple 
and interesting to xv6.

TODO LIST:
buddy system -> finished kalloc.c {TODO: replace kalloc & kfree in other files}
wait queue -> finished semaphore.c {TODO: more general code i.e. replace sleep and wakeup}
atomic ops -> finished atomic.h {just COPY AND PASTE current linux kernel arch/riscv code}
smp wait -> finished... really slow {w/o IPI support, just let clock intr handler do this}
disable preemption -> finished preempt.h proc.h {TODO: preempt_enable w/o schdule and preempt_disable}
slab allocation -> finished in slab.c/h, but init memory won't be freed
kernel thread -> finished in proc.c/h
rcu -> useless maybe
deferrable func -> useless maybe
signal -> REALLY INTERESTING
vm area and cow -> REALLY INTERESTING
better schedule policy -> REALLY INTERESTING
NUMA (interesting, yet I'm not interested in implementation)

Notes:
  How to add a syscall?
    step 1: In syscall.h, add a macro 'SYS_xxx'
    step 2: In syscall.c, add a fn declaration 'extern uint64 sys_xxx(void)'
    step 3: Also in syscall.c, add an entry in syscalls '[SYS_xxx] sys_xxx'
    step 4: Implement 'sys_xxx' in the according c file
    step 5: Add 'entry(xxx)' in usys.pl
    step 6: Add declaration in user.h

  why smp_function_call need interrupt on?
    This fn need to grab call_lock, which may grabing by others now. To let others release
    the lock. In linux, this cpu need to handle the IPI. In xv6, this cpu need the clk
    intr handler. If we disable intr, neither of this would happen.

  why atmoic_t is 'struct { volatile int; }' and why preempt_enable and disable need
  barrier?
    Sometimes we want compiler generate code in order, where we can use 'volatile' or
    'barrier()'. In atomic_t case, variable access should NEVER be optimized. And in
    preempt case, only when we enable or disable preemption, we need let the compiler
    be stupid. So they are different tools to do the same thing.

  Is that worthy to add more hardware support in xv6?
    Personally, no. What this project intended is only software tricks to make the
    kernel run faster. Although some hardware mechanism like DMA and IPI also speed
    kernel up, reading hardware documentation is way more complex and confusing to
    me than algorithm and data structure. It's fine to learn driver code, but never
    writting driver now or wasting time and lots of frustration.

  What does call-back func means, why we want delay the execution?
    call-back means kernel won't call it now, the reason here is we can't assure
    calling it is safe.
    delay execution is used because we don't won't allocate superfluous mem (like
    COW), we have to wait (like RCU, cpu_notifier), we want interrupt handler
    respond as fast as possible (like softirq tasklet)

THE ORIGINAL README FILE IS HERE
"
xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.


The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
"
